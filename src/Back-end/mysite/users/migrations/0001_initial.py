# Generated by Django 4.0.3 on 2022-05-25 12:08

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=100, verbose_name='user name')),
                ('full_name', models.CharField(max_length=100, verbose_name='full name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='E-mail')),
                ('profile_picture', models.ImageField(blank=True, upload_to='profile_pictures/%Y/%m', verbose_name='profile picture')),
                ('self_description', models.TextField(blank=True, verbose_name='self description')),
                ('profession', models.CharField(blank=True, max_length=150, verbose_name='Profession')),
                ('facebook_link', models.CharField(blank=True, max_length=200, verbose_name='Facebook')),
                ('twitter_link', models.CharField(blank=True, max_length=200, verbose_name='Twitter')),
                ('instagram_link', models.CharField(blank=True, max_length=200, verbose_name='Instagram')),
                ('linkedin_link', models.CharField(blank=True, max_length=200, verbose_name='LinkedIn')),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('follows', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'Teacher',
                'verbose_name_plural': 'Teachers',
                'ordering': ['full_name'],
            },
        ),
        migrations.CreateModel(
            name='Recommends',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_text', models.TextField(verbose_name='recommendation text')),
                ('recommended', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommended', to=settings.AUTH_USER_MODEL, verbose_name='Who is recommended')),
                ('recommender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommender', to=settings.AUTH_USER_MODEL, verbose_name='Who recommends')),
            ],
        ),
        migrations.AddField(
            model_name='teacher',
            name='recommends',
            field=models.ManyToManyField(related_name='recommendations', through='users.Recommends', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='teacher',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
